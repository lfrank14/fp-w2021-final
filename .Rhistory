<<<<<<< Updated upstream
left_join(a,b, by = "year", suffix = c("_group", "_total"))
left_join(a,b, by = "year",
suffix = c("_group", "_total"))
total_grouping <- function(data, var, grouping){
a <- count(data, var, grouping)
b <- count(data, var)
c <- left_join(a,b,by = "year",
suffix = c("_group", "_total"))
na.omit(c)
}
total_grouping(data, "year", "gender")
total_grouping(data, year, gender)
total_grouping <- function(data, var, grouping){
a <- count(data, var, grouping)
b <- count(data, var)
c <- left_join(a,b,by = "year",
suffix = c("_group", "_total"))
}
total_grouping(data, year, gender)
tibble(var1 = "x",
var2 = "y")
my_df <- tibble(var1 = "x",
var2 = "y")
df <- tibble(var1 = "x",
var2 = "y")
df[x]
df["x"]
df <- tibble(var1 = "x",
var2 = "y")
df["x"]
df[var1]
df["var1"]
df$var1
df[,x]
df[,x, drop=FALSE]
df <- data.frame(var1 = "x",
var2 = "y")
df[,x, drop=FALSE]
df <- data.frame(y = "x",
var2 = "y")
df$var1
df[,x, drop=FALSE]
d <- data.frame(x = 1, y = 2)
x <- "y"
d
d[, x, drop=FALSE]
d
x <- "variable name"
d[, x, drop=FALSE]
x <- "y"
d[, x, drop=FALSE]
x <- "g"
d[, x, drop=FALSE]
x <- "x"
d[, x, drop=FALSE]
?count
total_grouping <- function(data, var, grouping){
a <- count(data, var, grouping) # Use !! and the the quoted variables
b <- count(data, var)
b <- rename(b, "total" = "n")
c <- left_join(a,b)
na.omit(c)
}
total_grouping(data, "year", "gender")
data
split(data, data[gender])
split(data, data["gender"])
split_df <- split(data, data["gender"])
vapply(split_df, nrow, FUN.VALUE = integer(1))
split_df <- split(data, data["var"])
vapply(split_df, nrow, FUN.VALUE = integer(1))
split_df <- split(data, data["year"])
vapply(split_df, nrow, FUN.VALUE = integer(1))
?split
split_df <- split(data, c(data["year"],data["gender"]))
vapply(split_df, nrow, FUN.VALUE = integer(1))
map(split_df, nrow)
map_df(split_df, nrow)
map(split_df, nrow)
vapply(split_df, nrow, FUN.VALUE = integer(1))
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
data["year"]
unique(data["year"]
unique(data["year"])
years <- unique(data["year"])
years <- unique(data["year"])
genders <- unique(data["gender"])
years
genders
left_join(years, gender)
left_join(data$years, data$gender)
left_join(data$years, data$gender)
left_join(as.data.frame(data$years), as.data.frame(data$gender))
cbind.data.frame(years, genders)
cbind.data.frame(years, rep(genders[1], length(years)),
rep(genders[2], length(years)))
genders_col <- c(rep(genders[1], length(years)),
rep(genders[2], length(years)))
genders_col <- c(rep(genders[1], length(years)),
rep(genders[2], length(years)))
genders[1]
years <- unique(data["year"])
genders <- unique(data["gender"])
genders_col <- c(rep(genders[1], length(years)),
rep(genders[2], length(years)))
years
genders_col <- c(rep(genders[,1], length(years)),
rep(genders[,2], length(years)))
genders_col <- c(rep(genders[,1], length(years)),
rep(genders[,2], length(years)))
genders_col <- c(rep(genders[1,], length(years)),
rep(genders[2,], length(years)))
genders_col
genders_col <- c(rep(genders[1,], length(years)),
rep(genders[2,], length(years)))
length(years)
genders_col <- c(rep(genders[1,], nrow(years)),
rep(genders[2,], nrow(years)))
gender_col
genders_col
cbind.data.frame(years, genders_col)
df <- data.frame(year = years,
gender= genders_col,
counts = counts)
df
split_df <- split(data, c(data["year"],data["gender"]))
map(split_df, nrow)
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
counts
split_df_2 <- split(data, c(data["year"]))
split_df <- split(data, c(data["year"],data["gender"]))
map_df(split_df, nrow)
split_df_2 <- split(data, c(data["year"]))
map_df(split_df2, nrow)
split_df_2 <- split(data, c(data["year"]))
map_df(split_df_2, nrow)
t(map_df(split_df, nrow)_
t(map_df(split_df, nrow))
?left_join
split_df <- split(data, c(data["year"],data["gender"]))
split_df <- split(data, c(data["year"],data["gender"]))
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
counts
split_df
tibble::tibble(
var_levels = names(counts),
count = counts
)
tibble::tibble(
var_names = names(counts),
count = counts
)
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("A", "B"))
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("A", "B"), sep = "([.])")
split_df_2 <- split(data, c(data["year"]))
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
tibble::tibble(
var_names = names(counts),
count = counts)
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
tibble::tibble(
var_names = names(counts),
count = counts)
counts <- vapply(split_df_2, nrow, FUN.VALUE = integer(1))
tibble::tibble(
var_names = names(counts),
count = counts)
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("A", "B"), sep = "([.])")
# Working out a solution with one example
split_df <- split(data, c(data["year"],data["gender"]))
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("A", "B"), sep = "([.])")
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("year", "gender"), sep = "([.])")
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("year", "gender"), sep = "(.)")
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("year", "gender"), sep = "[.]")
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("year", "gender"), sep = ".")
tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("year", "gender"), sep = "[.]")
split_df_2 <- split(data, c(data["year"]))
tibble::tibble(
year = names(counts_2),
count = counts_2)
counts_2 <- vapply(split_df_2, nrow, FUN.VALUE = integer(1))
tibble::tibble(
year = names(counts_2),
count = counts_2)
tibble_1 <- tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("year", "gender"), sep = "[.]")
tibble_2 <- split_df_2 <- split(data, c(data["year"]))
counts_2 <- vapply(split_df_2, nrow, FUN.VALUE = integer(1))
tibble::tibble(
year = names(counts_2),
count = counts_2)
split_2 <- split_df_2 <- split(data, c(data["year"]))
counts_2 <- vapply(split_df_2, nrow, FUN.VALUE = integer(1))
tibble::tibble(
year = names(counts_2),
count = counts_2)
tibble_2 <-tibble::tibble(
year = names(counts_2),
count = counts_2)
View(tibble_2)
left_join(tibble_1,tibble_2)
count(data, year, gender)
# Working out a solution with one example
split_df <- split(data, c(data["year"],data["gender"]))
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
tibble_1 <- tibble::tibble(
var_names = names(counts),
count = counts) %>%
separate(var_names, c("year", "gender"), sep = "[.]")
split_2 <- split_df_2 <- split(data, c(data["year"]))
counts_2 <- vapply(split_df_2, nrow, FUN.VALUE = integer(1))
tibble_2 <-tibble::tibble(
year = names(counts_2),
count = counts_2)
left_join(tibble_1,tibble_2)
tibble_1
tibble_2
left_join(tibble_1,tibble_2, by = year)
left_join(tibble_1,tibble_2, by = "year")
left_join(tibble_1,tibble_2, by = "year",
suffix = c("_group", "_total"))
# Working out a solution with one example
split_df <- split(data, c(data["year"],data["gender"]))
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
tibble_1 <- tibble::tibble(
var_names = names(counts),
n = counts) %>%
separate(var_names, c("year", "gender"), sep = "[.]")
split_2 <- split_df_2 <- split(data, c(data["year"]))
counts_2 <- vapply(split_df_2, nrow, FUN.VALUE = integer(1))
tibble_2 <-tibble::tibble(
year = names(counts_2),
n = counts_2)
left_join(tibble_1,tibble_2, by = "year",
suffix = c("_group", "_total"))
split(data, c(data$var,data$grouping)
split(data, c(data$var,data$grouping))
data
split(data, c(data$year,data$gender))
total_grouping <- function(data, var, grouping){
split_df <- split(data, c(data$var,data$grouping))
counts <- vapply(split_df, nrow, FUN.VALUE = integer(1))
tibble_1 <- tibble::tibble(
var_names = names(counts),
n = counts) %>%
separate(var_names, c("year", "gender"), sep = "[.]")
split_2 <- split_df_2 <- split(data, data$year)
counts_2 <- vapply(split_df_2, nrow, FUN.VALUE = integer(1))
tibble_2 <-tibble::tibble(
year = names(counts_2),
n = counts_2)
left_join(tibble_1,tibble_2, by = "year",
suffix = c("_group", "_total"))
}
total_grouping(data, year, gender)
split(data, c(data$gender,data$year))
total_grouping(data, "year", "gender")
total_grouping(data, year, gender)
total_grouping <- function(data, var, grouping){
a <- count(data, var, grouping)
b <- count(data, var)
c <- left_join(a,b,by = "year",
suffix = c("_group", "_total"))
}
total_grouping(data, year, gender)
total_grouping(data, data$year, data$gender)
body(select)
body(dplyr::select)
body(group_by)
total_grouping <- function(data, var, grouping){
a <- count(data, {{var}}, {{grouping}})
b <- count(data, {{var}})
c <- left_join(a,b,by = "year",
suffix = c("_group", "_total"))
}
total_grouping(data, year, gender)
total_grouping <- function(data, var, grouping){
a <- count(data, {{var}}, {{grouping}})
b <- count(data, {{var}})
left_join(a,b,by = "year",
suffix = c("_group", "_total"))
}
total_grouping(data, year, gender)
total_grouping <- function(data, var, grouping){
v1 <- enquo(var)  #quote the variables
v2 <- enquo(grouping)
a <- count(data, !!v1, !!v2) # use !! to evaluate the quoted variables
b <- count(data, !!v1)
left_join(a,b,by = "year",
suffix = c("_group", "_total"))
}
total_grouping(data, year, gender)
total_grouping(data, year, race_ethnic) %>%
head(10)
total_grouping(data, year, race_ethnic) %>%
head()
total_grouping(data, year, food_security) %>%
head()
total_grouping(data, year, gender)
total_grouping(data, year, race_ethnic) %>%
head()
total_grouping(data, year, food_security) %>%
head()
total_grouping(data, year, gender) %>%
mutate(percent = n/total * 100,
percent = round(percent, 2),
percent = paste0(percent, "%"))
total_grouping(data, year, gender)
total_grouping(data, year, gender) %>%
mutate(percent = n_group/n_total * 100,
percent = round(percent, 2),
percent = paste0(percent, "%"))
percent_grouping <- function(data, var, grouping){
v1 <- enquo(var)
v2 <- enquo(grouping)
total_grouping(data, var, grouping) %>%
mutate(percent = n/total * 100,
percent = round(percent, 2),
percent = paste0(percent, "%"))
}
percent_grouping(data, year, gender)
percent_grouping <- function(data, var, grouping){
total_grouping(data, {{var}}, {{grouping}}) %>%
mutate(percent = n_group/n_total * 100,
percent = round(percent, 2),
percent = paste0(percent, "%"))
}
percent_grouping(data, year, gender)
percent_grouping(data, year, gender) %>% head()
percent_grouping(data, year, race_ethnic) %>% head()
temp_table <- percent_grouping(data, year, gender) %>%
select(year, gender, percent) %>%
pivot_wider(names_from = gender,
values_from = percent) %>% t(.)
table <- temp_table[2:3,]
colnames(table) <- temp_table[1,]
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
row_spec(0, angle = -45)
my_table <- function(data, var, grouping){
temp_table <- percent_grouping(data, {{var}}, {{grouping}}) %>%
select({{var}}, {{grouping}}, percent) %>%
pivot_wider(names_from = !!v2,
values_from = percent) %>% t(.)
table <- temp_table[2:nrow(temp_table),]
colnames(table) <- temp_table[1,]
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
row_spec(0, angle = -45)
}
my_table(data, year, gender)
my_table <- function(data, var, grouping){
temp_table <- percent_grouping(data, {{var}}, {{grouping}}) %>%
select({{var}}, {{grouping}}, percent) %>%
pivot_wider(names_from = {{grouping}},
values_from = percent) %>% t(.)
table <- temp_table[2:nrow(temp_table),]
colnames(table) <- temp_table[1,]
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
row_spec(0, angle = -45)
}
my_table(data, year, gender)
my_table(data, year, race_ethnic)
my_table(data, year, food_security)
map(c(data, year, gender), my_table)
map(my_table, data, year, gender)
map(c(gender, race_ethnic), my_table, data, year)
map(c("gender", "race_ethnic"), my_table, data, year)
my_table(data, year, c(gender, race_ethnic))
c(gender, race_ethnic, )
li <- c(gender, race_ethnic)
temp_table <- percent_grouping(data, year, gender) %>%
select(year, gender, percent) %>%
pivot_wider(names_from = gender,
values_from = percent) %>% t(.)
temp_table
percent_grouping(data, year, gender)
percent_grouping(data, year, gender) %>%
select(year, gender, percent)
percent_grouping(data, year, gender) %>%
select(year, gender, percent) %>%
pivot_wider(names_from = gender,
values_from = percent)
# creates an ugly table that
temp_table <- percent_grouping(data, year, gender) %>%
select(gender, percent) %>%
pivot_wider(names_from = gender,
values_from = percent) %>% t(.)
# creates an ugly table that
temp_table <- percent_grouping(data, year, gender) %>%
select(gender, percent) %>%
pivot_wider(names_from = gender,
values_from = percent) %>% t(.)
# creates an ugly table that
temp_table <- percent_grouping(data, year, gender) %>%
select(year, gender, percent) %>%
pivot_wider(names_from = gender,
values_from = percent) %>% t(.)
temp_table
table <- temp_table[2:3,]
colnames(table) <- temp_table[1,]
#stylized table
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F) #gives me a stylized striped table
%>%
row_spec(0, angle = -45) #rotates column names
#stylized table
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F) #gives me a stylized striped table
#stylized table
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F)  %>% #gives me a stylized striped table
row_spec(0, angle = -45) #rotates column names
?captilize
colnames(table) <- str_to_title(temp_table[1,])
#stylized table
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F)  %>% #gives me a stylized striped table
row_spec(0, angle = -45) #rotates column names
colnames(table) <- temp_table[1,]
colnames(table)
rownames(table) <- rownames(table) %>% str_to_title()
#stylized table
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F)  %>% #gives me a stylized striped table
row_spec(0, angle = -45) #rotates column names
percent_grouping <- function(data, var, grouping){
total_grouping(data, {{var}}, {{grouping}}) %>%
mutate(percent = n_group/n_total * 100,
percent_symbol = paste0(round(percent, 2), "%"))
}
percent_grouping(data, year, gender) %>% head()
percent_grouping(data, year, race_ethnic) %>% head()
percent_grouping <- function(data, var, grouping){
total_grouping(data, {{var}}, {{grouping}}) %>%
mutate(percent = n_group/n_total * 100,
percent = round(percent, 2),
percent = paste0(percent, "%"))
}
percent_grouping(data, year, gender) %>% head()
percent_grouping(data, year, race_ethnic) %>% head()
# creates an ugly first draft
temp_table <- percent_grouping(data, year, gender) %>%
select(year, gender, percent) %>%
pivot_wider(names_from = gender,
values_from = percent) %>% t(.)
temp_table
# moves the first row to the title
table <- temp_table[2:3,]
colnames(table) <- temp_table[1,]
rownames(table) <- rownames(table) %>% str_to_title()
#stylized table
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F)  %>% #gives me a stylized striped table
row_spec(0, angle = -45) #rotates column names
my_table <- function(data, var, grouping){
temp_table <- percent_grouping(data, {{var}}, {{grouping}}) %>%
select({{var}}, {{grouping}}, percent) %>%
pivot_wider(names_from = {{grouping}},
values_from = percent) %>% t(.)
table <- temp_table[2:nrow(temp_table),]
colnames(table) <- temp_table[1,]
rownames(table) <- rownames(table) %>% str_to_title()
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
row_spec(0, angle = -45)
}
my_table(data, year, gender)
my_table(data, year, race_ethnic)
my_table(data, year, food_security)
my_table(data, year, race_ethnic)
my_table(data, year, gender)
table %>% kbl() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
row_spec(0, angle = -45)
map(list(c(data, year, gender),
c(data, year, race_ethnic)), my_table)
vapply(list(c(data, year, gender),
c(data, year, race_ethnic)), my_table)
install.packages("devtools")
devtools::install_github("gadenbuie/xaringanExtra")
=======
ggplot(..2, aes(year, slope, group = security)) +
geom_point() +
geom_line() +
labs(title = "Slope of relation between age and food security by year",
x = "Year",
y = "Slope")
})
)
library(glue)
# first we have to convert the food insecurity variable to a factor and remove NAs. We're also going to remove any variables we're not using.
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
filter(security != is.na(security))
# We want to get the percentage of the population that falls in each food security group at each time point, so we're going to first count the number of people in each group in each year and the population in each year.
fi_factor <- fi_factor %>%
add_count(year, name = "pop") %>%
add_count(year, security, name = "ct") %>%
dplyr::select(year, security, age, pop, ct) %>%
mutate(pop = as.numeric(pop),
ct = as.numeric(ct),
percent_insecurity = ct/pop)
# now we want to create a nested data frame that groups by year and by level of food insecurity. We're going to look at the linear relationship between age and percent of food insecurity for each year and each level of food insecurity.
fi_grouped <- fi_factor %>%
group_by(year, security) %>%
nest()
str(fi_grouped)
# Now to get the relation between age and the percentage of food insecurity over time, we can fit a linear regression model predicting food insecurity from age. We can then extract the intercepts and slopes of each model to graph them.
fi_grouped_lm <- fi_grouped %>%
mutate(m1 = map(data, ~lm(percent_insecurity ~ age, data = .x)),
coefs = map(m1, coefficients),
intercept = map_dbl(coefs, 1),
slope = map_dbl(coefs, 2)) %>%
dplyr::select(year, security, intercept, slope)
# I want to look at the change in slope of how age predicts food insecurity across time. So I want to have a line graph where the x axis is year and the y-axis is slope, and I want to see the change in slope over time.
fi_grouped_lm %>%
filter(security == "1") %>%
ggplot(aes(year, slope, group = security)) +
geom_point() +
geom_line() +
scale_color_viridis_d()
perc <- map(by_year, ~mutate(.x, pct_secure =  / pop)) # make a column for proportion of the population experiencing food insecurity
library(glue)
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope, group = security)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of relation between age and {.y} by year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope, group = security)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of relation between age and {.x} by year"),
x = "Year",
y = "Slope")
})
)
View(fi_grouped_plots[[3]][[1]])
fi_grouped_plots[[3]][[1]]
fi_grouped_plots[[3]]
ggplot(..2, aes(year, slope)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of relation between age and {.x} by year"),
x = "Year",
y = "Slope")
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of relation between age and {.x} by year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots[[3]]
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope, group = security)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of relation between age and {.x} by year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots[[3]]
View(fi_grouped_plots[[2]][[1]])
fi_grouped_renamed <- fi_grouped_lm %>%
recode(security, 1 = "Full food security",
2 = "Marginal food security",
3 = "Low food security",
4 = "Very low food security")
fi_grouped_renamed <- fi_grouped_lm %>%
recode(security, "1" = "Full food security",
"2" = "Marginal food security",
"3" = "Low food security",
"4" = "Very low food security")
# first we have to convert the food insecurity variable to a factor and remove NAs. We're also going to remove any variables we're not using.
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
recode(security, "1" = "Full food security",
"2" = "Marginal food security",
"3" = "Low food security",
"4" = "Very low food security") %>%
filter(security != is.na(security))
# first we have to convert the food insecurity variable to a factor and remove NAs. We're also going to remove any variables we're not using.
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
mutate(security = case_when("1" = "Full food security",
"2" = "Marginal food security",
"3" = "Low food security",
"4" = "Very low food security")) %>%
filter(security != is.na(security))
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
mutate(security = case_when(security == "1" = "Full food security"
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
mutate(security = case_when(security == "1" ~"Full food security"
)
View(fi_factor)
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
mutate(security = case_when(security == "1" ~"Full food security"))
View(fi_factor)
# first we have to convert the food insecurity variable to a factor and remove NAs. We're also going to remove any variables we're not using.
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
mutate(security = case_when(security == "1" ~ "Full food security",
security == "2" ~ "Marginal food security",
security == "3" ~ "Low food security",
security == "4" ~ "Very low food security")) %>%
filter(security != is.na(security))
# We want to get the percentage of the population that falls in each food security group at each time point, so we're going to first count the number of people in each group in each year and the population in each year.
fi_factor <- fi_factor %>%
add_count(year, name = "pop") %>%
add_count(year, security, name = "ct") %>%
dplyr::select(year, security, age, pop, ct) %>%
mutate(pop = as.numeric(pop),
ct = as.numeric(ct),
percent_insecurity = ct/pop)
# now we want to create a nested data frame that groups by year and by level of food insecurity. We're going to look at the linear relationship between age and percent of food insecurity for each year and each level of food insecurity.
fi_grouped <- fi_factor %>%
group_by(year, security) %>%
nest()
str(fi_grouped)
# Now to get the relation between age and the percentage of food insecurity over time, we can fit a linear regression model predicting food insecurity from age. We can then extract the intercepts and slopes of each model to graph them.
fi_grouped_lm <- fi_grouped %>%
mutate(m1 = map(data, ~lm(percent_insecurity ~ age, data = .x)),
coefs = map(m1, coefficients),
intercept = map_dbl(coefs, 1),
slope = map_dbl(coefs, 2)) %>%
dplyr::select(year, security, intercept, slope)
View(fi_grouped_lm)
# I want to look at the change in slope of how age predicts food insecurity across time. So I want to have a line graph where the x axis is year and the y-axis is slope, and I want to see the change in slope over time.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, slope, group = security)) +
geom_point() +
geom_line() +
scale_color_viridis_d()
library(glue)
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of relation between age and {.x} by year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots[[3]]
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of Relation Between Age and {.x} by Year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots[[3]]
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope, group = security)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of Relation Between Age and {.x} by Year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots[[3]]
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of Relation Between Age and {.x} by Year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope)) +
geom_point(color = slope) +
geom_line() +
labs(title = glue("Slope of Relation Between Age and {.x} by Year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope)) +
geom_point(color = year) +
geom_line() +
labs(title = glue("Slope of Relation Between Age and {.x} by Year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of Relation Between Age and {.x} by Year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots[[3]]
fi_grouped_lm <- fi_grouped %>%
mutate(m1 = map(data, ~lm(percent_insecurity ~ age, data = .x)),
coefs = map(m1, coefficients),
intercept = map_dbl(coefs, 1),
slope = map_dbl(coefs, 2)) %>%
unnest(fi_grouped, data)
fi_grouped_lm <- fi_grouped %>%
mutate(m1 = map(data, ~lm(percent_insecurity ~ age, data = .x)),
coefs = map(m1, coefficients),
intercept = map_dbl(coefs, 1),
slope = map_dbl(coefs, 2)) %>%
unnest(data)
View(fi_grouped_lm)
View(fi_grouped_lm)
fi_grouped_lm <- fi_grouped %>%
mutate(m1 = map(data, ~lm(percent_insecurity ~ age, data = .x)),
coefs = map(m1, coefficients),
intercept = map_dbl(coefs, 1),
slope = map_dbl(coefs, 2)) %>%
unnest(data) %>%
dplyr::select(year, security, intercept, slope, percent_insecurity)
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_bar()+
scale_color_viridis_d()
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(percent_insecurity)) +
geom_bar() +
scale_color_viridis_d()
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_point()+
scale_color_viridis_d()
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_point() +
scale_color_viridis_d()
# first we have to convert the food insecurity variable to a factor and remove NAs. We're also going to remove any variables we're not using.
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
mutate(security = case_when(security == "1" ~ "Full food security",
security == "2" ~ "Marginal food security",
security == "3" ~ "Low food security",
security == "4" ~ "Very low food security")) %>%
filter(security != is.na(security))
# We want to get the percentage of the population that falls in each food security group at each time point, so we're going to first count the number of people in each group in each year and the population in each year.
fi_factor <- fi_factor %>%
add_count(year, name = "pop") %>%
add_count(year, security, name = "ct") %>%
dplyr::select(year, security, age, pop, ct) %>%
mutate(pop = as.numeric(pop),
ct = as.numeric(ct),
percent_insecurity = ct/pop)
# now we want to create a nested data frame that groups by year and by level of food insecurity. We're going to look at the linear relationship between age and percent of food insecurity for each year and each level of food insecurity.
fi_grouped <- fi_factor %>%
group_by(year, security) %>%
nest()
fi_grouped_lm <- fi_grouped %>%
mutate(m1 = map(data, ~lm(percent_insecurity ~ age, data = .x)),
coefs = map(m1, coefficients),
intercept = map_dbl(coefs, 1),
slope = map_dbl(coefs, 2)) %>%
unnest(data) %>%
dplyr::select(year, security, intercept, slope, percent_insecurity)
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_point() +
scale_color_viridis_d()
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_line() +
scale_color_viridis_d()
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_point() +
scale_color_viridis_d()
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_point() +
geom_line() +
scale_color_viridis_d()
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_point() +
geom_line()
# I want to look at the change in percent of different levels of food security across time. So I want to have a bar graph where the x axis is year and the y-axis is percent of food security.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, percent_insecurity)) +
geom_point()
library(glue)
fi_grouped_plots_2 <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, percent_insecurity)) +
geom_point() +
labs(title = glue("Percent of {.x} in the Population by Year"),
x = "Year",
y = "Percent of {.x} in the Population")
})
)
fi_grouped_plots_2[[3]]
fi_grouped_plots_2 <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, percent_insecurity)) +
geom_point() +
labs(title = glue("Percent of {.x} in the Population by Year"),
x = "Year",
y = "Percent")
})
)
fi_grouped_plots_2[[3]]
# first we have to convert the food insecurity variable to a factor and remove NAs. We're also going to remove any variables we're not using.
fi_factor <- fi %>%
mutate(security = as_factor(hh_food_secure)) %>%
mutate(security = case_when(security == "1" ~ "full food security",
security == "2" ~ "marginal food security",
security == "3" ~ "low food security",
security == "4" ~ "very low food security")) %>%
filter(security != is.na(security))
# We want to get the percentage of the population that falls in each food security group at each time point, so we're going to first count the number of people in each group in each year and the population in each year.
fi_factor <- fi_factor %>%
add_count(year, name = "pop") %>%
add_count(year, security, name = "ct") %>%
dplyr::select(year, security, age, pop, ct) %>%
mutate(pop = as.numeric(pop),
ct = as.numeric(ct),
percent_insecurity = ct/pop)
# now we want to create a nested data frame that groups by year and by level of food insecurity. We're going to look at the linear relationship between age and percent of food insecurity for each year and each level of food insecurity.
fi_grouped <- fi_factor %>%
group_by(year, security) %>%
nest()
str(fi_grouped)
# Now to get the relation between age and the percentage of food insecurity over time, we can fit a linear regression model predicting food insecurity from age. We can then extract the intercepts and slopes of each model to graph them.
fi_grouped_lm <- fi_grouped %>%
mutate(m1 = map(data, ~lm(percent_insecurity ~ age, data = .x)),
coefs = map(m1, coefficients),
intercept = map_dbl(coefs, 1),
slope = map_dbl(coefs, 2)) %>%
dplyr::select(year, security, intercept, slope)
# I want to look at the change in slope of how age predicts food insecurity across time. So I want to have a line graph where the x axis is year and the y-axis is slope, and I want to see the change in slope over time.
fi_grouped_lm %>%
filter(security == "Full food security") %>%
ggplot(aes(year, slope, group = security)) +
geom_point() +
geom_line() +
scale_color_viridis_d()
# I want to look at the change in slope of how age predicts food insecurity across time. So I want to have a line graph where the x axis is year and the y-axis is slope, and I want to see the change in slope over time.
fi_grouped_lm %>%
filter(security == "full food security") %>%
ggplot(aes(year, slope, group = security)) +
geom_point() +
geom_line() +
scale_color_viridis_d()
library(glue)
fi_grouped_plots <- fi_grouped_lm %>%
group_by(security) %>%
nest() %>%
mutate(plot = pmap(list(security, data), ~{
ggplot(..2, aes(year, slope)) +
geom_point() +
geom_line() +
labs(title = glue("Slope of Relation Between Age and {.x} by Year"),
x = "Year",
y = "Slope")
})
)
fi_grouped_plots[[3]]
walk2(paths, fi_grouped_plots$plots, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
walk2(fi_grouped_plots, fi_grouped_plots$plots, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
walk2(fi_grouped_plots, fi_grouped_plots$plot, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
walk2(paths, fi_grouped_plots$plot, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
fs::dir_create(here::here("plots", "age_food_security"))
food_security_groups <- str_replace_all(tolower(fi_grouped_plots$security), " ", "-")
paths <- here::here("plots", "age_food_security", glue("{food_security_groups}.png"))
walk2(paths, fi_grouped_plots$plot, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
fs::dir_create(here::here("looping", "plots", "age_food_security"))
food_security_groups <- str_replace_all(tolower(fi_grouped_plots$security), " ", "-")
paths <- here::here("looping", "plots", "age_food_security", glue("{food_security_groups}.png"))
walk2(paths, fi_grouped_plots$plot, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
fs::dir_create(here::here("plots", "age_food_security"))
food_security_groups <- str_replace_all(tolower(fi_grouped_plots$security), " ", "-")
paths <- here::here("plots", "age_food_security", glue("{food_security_groups}.png"))
walk2(paths, fi_grouped_plots$plot, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
# now I'm going to export a plot for each level of food security
fs::dir_create(here::here("plots", "slope_plots"))
food_security_groups <- str_replace_all(tolower(fi_grouped_plots$security), " ", "-")
food_security_groups <- str_replace_all(tolower(fi_grouped_plots$security), " ", "-")
paths <- here::here("plots", "slope_plots", glue("age_{food_security_groups}.png"))
walk2(paths, fi_grouped_plots$plot, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
fs::dir_create(here::here("plots", "percent_plots"))
paths_2 <- here::here("plots", "percent_plots", glue("percent_{food_security_groups}.png"))
walk2(paths_2, fi_grouped_plots_2$plot, ggsave,
width = 9.5,
height = 6.5,
dpi = 500)
library(tidyverse)
library(repurrrsive)
library(rio)
library(here)
library(glue)
fi_grouped_plots_2$plot[[2]]
>>>>>>> Stashed changes
